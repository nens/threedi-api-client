======================
threedi-openapi-client
======================


.. image:: https://img.shields.io/pypi/v/threedi_openapi_client.svg
        :target: https://pypi.python.org/pypi/threedi_openapi_client

.. image:: https://img.shields.io/travis/larsclaussen/threedi_openapi_client.svg
        :target: https://travis-ci.org/larsclaussen/threedi_openapi_client

.. image:: https://readthedocs.org/projects/threedi-openapi-client/badge/?version=latest
        :target: https://threedi-openapi-client.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status


.. image:: https://pyup.io/repos/github/larsclaussen/threedi_openapi_client/shield.svg
     :target: https://pyup.io/repos/github/larsclaussen/threedi_openapi_client/
     :alt: Updates



* A Python library for the 3DI API 


* Free software: BSD license
* Documentation: https://threedi-openapi-client.readthedocs.io.


Features
--------

* OOP API interaction
* async support
* ...


Installation
------------

pip install threedi-openapi-client


Getting started
---------------


This library is a thin wrapper around the auto generated OpenAPI client by 
https://openapi-generator.tech. 

There are two main entry points to make api calls to the 3Di API V3.0. The first one 
is the `ThreediApiClient` class that will handle the login process for you and then 
directly can be used on any API endpoint. 
Let's jump right in with an example ::


        from threedi_api_client import ThreediApiClient


The `ThreediApiClient` needs three settings to make requests to the 3Di API:

  - the host name
  - the username to login with and 
  - the user's password

These settings should be stored in environment variables, or in a ".env" file that can be passes to 
the ThreediApiClient on initialisation.

A sample `.env` file could look like this ::

        API_HOST=https://api.3di.live/v3.0
        API_USERNAME=black.sheep
        API_PASSWORD=myverysecretmehhh


To get an instance of the client ::
        env_file = <path>/.env
        api_client = ThreediApiClient(env_file)

Now you can easily make use of the api models generated by the openapi client

To list all file resources get yourself an instance of the `FilesApi` class  ::

        files = FilesApi(api_client)
        files.files_list()                                                                                                                
        {'count': 3064,
        'next': 'https://api.3di.live/v3.0/files/?limit=10&offset=10',
        'previous': None,
        'results': [{'bucket': '3di',
                'etag': None,
                'expiry_date': '2019-08-16',
                'filename': 'precipitation_1.nc',
                'id': 2,
        ...


Upload example (rain raster upload)::
   
        import requests
        from openapi_client import SimulationsApi

        simulation_pk = 1
        filename = 'bergermeer_rasters_from_geotiffs.nc'
        local_file_path = './data/bergermeer_rasters_from_geotiffs.nc'

        # Use the api_client as created in the code block
        # above
        sim_api = SimulationsApi(api_client)

        # Create rain raster upload resource in API
        # returns a 'file_upload' instance containing a
        # put_url property which is the URL to the object
        # storage object to be uploaded with an HTTP PUT requests.
        file_upload = sim_api.simulations_events_rain_rasters_upload(
            filename, simulation_pk)

        # Open the local file in binary mode for uploading
        with open(local_file_path, 'rb') as f: 
            # Requests automatically streams the file this way
            requests.put(file_upload.put_url, data=f)



Credits
-------

This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
