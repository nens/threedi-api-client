======================
threedi-openapi-client
======================


.. image:: https://img.shields.io/pypi/v/threedi_openapi_client.svg
        :target: https://pypi.python.org/pypi/threedi_openapi_client

.. image:: https://img.shields.io/travis/larsclaussen/threedi_openapi_client.svg
        :target: https://travis-ci.org/larsclaussen/threedi_openapi_client

.. image:: https://readthedocs.org/projects/threedi-openapi-client/badge/?version=latest
        :target: https://threedi-openapi-client.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status


.. image:: https://pyup.io/repos/github/larsclaussen/threedi_openapi_client/shield.svg
     :target: https://pyup.io/repos/github/larsclaussen/threedi_openapi_client/
     :alt: Updates



* A Python library for the 3DI API 


* Free software: BSD license
* Documentation: https://threedi-openapi-client.readthedocs.io.


Features
--------

* OOP API interaction
* async support
* ...


Installation
------------

We recommend `pip` to install this package:: 

    pip install --user threedi-openapi-client  


Getting started
---------------


This library is a thin wrapper around the auto generated OpenAPI client by 
https://openapi-generator.tech. 

There are two main entry points to make api calls to the 3Di API V3.0. 

The first one is the `ThreediApiClient` class that will handle the login process for you and then 
directly can be used on any API endpoint. 
Let's jump right in with an example ::


        from threedi_api_client import ThreediApiClient


The `ThreediApiClient` needs three settings to make requests to the 3Di API:

  - the host name
  - the username to login with and 
  - the user's password

These settings should be stored in environment variables, or in a ".env" file that can be passes to 
the ThreediApiClient on initialisation.

A sample `.env` file could look like this ::

        API_HOST=https://api.3di.live/v3.0
        API_USERNAME=black.sheep
        API_PASSWORD=myverysecretmehhh


To get an instance of the client ::

        env_file = "<path>/.env"
        api_client = ThreediApiClient(env_file)

Now you can easily make use of the api models generated by the openapi client.

To create a simulation ::
        
        from openapi_client.api import OrganisationsApi
        # first get the uuid for the organisation because I just keep forgetting it
        from openapi_client.api import OrganisationsApi
        organisations_api = OrganisationsApi(api_client)
        # I am lazy so I look for an organisation that starts with "nelen", case insensitive 
        organisations_api.organisations_list(name__istartswith="nelen")
        {'count': 2,
        'next': None,
        'previous': None,
        'results': [{'name': 'Nelen & Schuurmans',
              'unique_id': 'b8f91de705774fe8a4e7cb2d9413bf5c',
              'url': 'https://api.3di.live/v3.0/organisations/61f5a464c35044c19bc7d4b42d7f58cb/'},
             {'name': 'Nelen & Schuurmans alleen werknemers',
              'unique_id': 'e82c74c4fb5846b3ae990c0cc69130c6',
              'url': 'https://api.3di.live/v3.0/organisations/cde64bc165644be9af023fc4fa18d098/'}]}        


        from datetime import datetime
        openapi_client.models.simulation.Simulation


        # let's define a Simulation
        my_extreme_event_simulation = Simulation(
                name="my extreme event",   # (optional)
                threedimodel=1,            # The model schema to use for the simulation by referring to the id of the threedimodel resource
                organisation='b8f91de705774fe8a4e7cb2d9413bf5c',  
                start_datetime=datetime.utcnow(),  # accepts datetime instance
                duration=7200              # in secs ==> 2 hours 
        )
        from openapi_client import SimulationsApi
        simulations_api = SimulationsApi(api_client)
        simulations_api.simulations_create(my_extreme_event_simulation)
        {'created': 'now',
        'duration': 7200,
        'duration_humanized': '2 hours, 0 minutes, 0 seconds',
        'end_datetime': '2019-11-04T16:19:46Z',
        'id': 631,
        'name': 'my extreme event',
        'organisation': 'b8f91de705774fe8a4e7cb2d9413bf5c',
        'organisation_name': 'Nelen & Schuurmans',
        'slug': 'my-extreme-event-378f55a5-06df-4021-8fb6-65bbb70519dc',
        'start_datetime': '2019-11-04T14:19:46Z',
        'threedimodel': 'https://api.3di.live/v3.0/threedimodels/1/',
        'threedimodel_id': '1',
        'url': 'https://api.3di.live/v3.0/simulations/631/',
        'user': 'lars.claussen',
        'uuid': '378f55a5-06df-4021-8fb6-65bbb70519dc'}


Next, lets us add a rain event to the simulation ::

        from openapi_client.models import ConstantRain
        const_rain = ConstantRain(
            simulation=631,   # the ID we got from our create call above
            offset=60,        # let the rain start after one minute
            duration=5000,    # let the rain last for 5000 secs
            value=0.0006,     # not too extreme after all...;-)
            units="m/s"       # the only unit supported for now
        )
        simulations_api.simulations_events_rain_constant_create(631, const_rain)
        {'duration': 5000,
        'offset': 60,
        'simulation': 'https://api.3di.live/v3.0/simulations/631/',
        'units': 'm/s',
        'url': 'https://api.3di.live/v3.0/simulations/631/events/rain/constant/17/',
        'value': 0.0006}


If you want to see which events are defined on a given simulation ::

        simulations_api.simulations_events(631)
        {'boundaries': None,
        'breach': [],
        'filerasterrain': [],
        'filerastersourcessinks': [],
        'filetimeseriesrain': [],
        'filetimeseriessourcessinks': [],
        'initial_groundwaterlevel': None,
        'initial_onedwaterlevel': None,
        'initial_onedwaterlevelpredefined': None,
        'initial_savedstate': None,
        'initial_twodwaterlevel': None,
        'laterals': [],
        'lizardrasterrain': [],
        'lizardrastersourcessinks': [],
        'lizardtimeseriesrain': [],
        'lizardtimeseriessourcessinks': [],
        'savedstates': [],
        'timedstructurecontrol': [],
        'timeseriesrain': [{'constant': True,
                        'duration': 5000,
                        'interpolate': False,
                        'offset': 60,
                        'simulation': 'https://api.3di.live/v3.0/simulations/631/',
                        'units': 'm/s',
                        'url': 'https://api.3di.live/v3.0/simulations/631/events/rain/timeseries/17/',
                        'values': [[0.0, 0.0006], [5000.0, 0.0]]}],
        'timeseriessourcessinks': []}


To list all file resources get yourself an instance of the `FilesApi` class  ::

        files = FilesApi(api_client)
        files.files_list()                                                                                                                
        {'count': 3064,
        'next': 'https://api.3di.live/v3.0/files/?limit=10&offset=10',
        'previous': None,
        'results': [{'bucket': '3di',
                'etag': None,
                'expiry_date': '2019-08-16',
                'filename': 'precipitation_1.nc',
                'id': 2,
                ..

The second entry point is an object that handles the authentication is therefore is called 
 `ApiAccess`. It can be useful if you want to retrieve your auth token for example. ::

        from threedi_api_client import ApiAccess
        envf = "<path>/.env"
        a = ApiAccess(envf)
        a.access_token
        "eyJ0eXAiOiJKV1QiLCJhbGciOi..."


If you have an instance of the `ThreediApiClient` already you can also use the `api_access()` shortcut :: 

        ThreediApiClient.api_access().access_token()



Upload example (rain raster upload)::
   
        import requests
        from openapi_client import SimulationsApi

        simulation_pk = 1
        filename = 'bergermeer_rasters_from_geotiffs.nc'
        local_file_path = './data/bergermeer_rasters_from_geotiffs.nc'

        # Use the api_client as created in the code block
        # above
        sim_api = SimulationsApi(api_client)

        # Create rain raster upload resource in API
        # returns a 'file_upload' instance containing a
        # put_url property which is the URL to the object
        # storage object to be uploaded with an HTTP PUT requests.
        file_upload = sim_api.simulations_events_rain_rasters_upload(
            filename, simulation_pk)

        # Open the local file in binary mode for uploading
        with open(local_file_path, 'rb') as f: 
            # Requests automatically streams the file this way
            requests.put(file_upload.put_url, data=f)



Credits
-------

This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
