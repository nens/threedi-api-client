# coding: utf-8

"""
    3DI API

    3DI simulation API  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadRasterRain(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'multiplier': 'float',
        'simulation': 'str',
        'start_timestep': 'int',
        'end_timestep': 'int',
        'interval': 'int',
        'upload': 'UploadReadOnly'
    }

    attribute_map = {
        'url': 'url',
        'multiplier': 'multiplier',
        'simulation': 'simulation',
        'start_timestep': 'start_timestep',
        'end_timestep': 'end_timestep',
        'interval': 'interval',
        'upload': 'upload'
    }

    def __init__(self, url=None, multiplier=None, simulation=None, start_timestep=None, end_timestep=None, interval=None, upload=None):  # noqa: E501
        """UploadRasterRain - a model defined in OpenAPI"""  # noqa: E501

        self._url = None
        self._multiplier = None
        self._simulation = None
        self._start_timestep = None
        self._end_timestep = None
        self._interval = None
        self._upload = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if multiplier is not None:
            self.multiplier = multiplier
        if simulation is not None:
            self.simulation = simulation
        self.start_timestep = start_timestep
        self.end_timestep = end_timestep
        self.interval = interval
        if upload is not None:
            self.upload = upload

    @property
    def url(self):
        """Gets the url of this UploadRasterRain.  # noqa: E501


        :return: The url of this UploadRasterRain.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UploadRasterRain.


        :param url: The url of this UploadRasterRain.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def multiplier(self):
        """Gets the multiplier of this UploadRasterRain.  # noqa: E501


        :return: The multiplier of this UploadRasterRain.  # noqa: E501
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this UploadRasterRain.


        :param multiplier: The multiplier of this UploadRasterRain.  # noqa: E501
        :type: float
        """

        self._multiplier = multiplier

    @property
    def simulation(self):
        """Gets the simulation of this UploadRasterRain.  # noqa: E501


        :return: The simulation of this UploadRasterRain.  # noqa: E501
        :rtype: str
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this UploadRasterRain.


        :param simulation: The simulation of this UploadRasterRain.  # noqa: E501
        :type: str
        """

        self._simulation = simulation

    @property
    def start_timestep(self):
        """Gets the start_timestep of this UploadRasterRain.  # noqa: E501

        Start of event in simulation in seconds  # noqa: E501

        :return: The start_timestep of this UploadRasterRain.  # noqa: E501
        :rtype: int
        """
        return self._start_timestep

    @start_timestep.setter
    def start_timestep(self, start_timestep):
        """Sets the start_timestep of this UploadRasterRain.

        Start of event in simulation in seconds  # noqa: E501

        :param start_timestep: The start_timestep of this UploadRasterRain.  # noqa: E501
        :type: int
        """
        if start_timestep is not None and start_timestep > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `start_timestep`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if start_timestep is not None and start_timestep < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `start_timestep`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._start_timestep = start_timestep

    @property
    def end_timestep(self):
        """Gets the end_timestep of this UploadRasterRain.  # noqa: E501

        End of event in simulation in seconds  # noqa: E501

        :return: The end_timestep of this UploadRasterRain.  # noqa: E501
        :rtype: int
        """
        return self._end_timestep

    @end_timestep.setter
    def end_timestep(self, end_timestep):
        """Sets the end_timestep of this UploadRasterRain.

        End of event in simulation in seconds  # noqa: E501

        :param end_timestep: The end_timestep of this UploadRasterRain.  # noqa: E501
        :type: int
        """
        if end_timestep is not None and end_timestep > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `end_timestep`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if end_timestep is not None and end_timestep < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `end_timestep`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._end_timestep = end_timestep

    @property
    def interval(self):
        """Gets the interval of this UploadRasterRain.  # noqa: E501

        Interval in seconds  # noqa: E501

        :return: The interval of this UploadRasterRain.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this UploadRasterRain.

        Interval in seconds  # noqa: E501

        :param interval: The interval of this UploadRasterRain.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if interval is not None and interval < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._interval = interval

    @property
    def upload(self):
        """Gets the upload of this UploadRasterRain.  # noqa: E501


        :return: The upload of this UploadRasterRain.  # noqa: E501
        :rtype: UploadReadOnly
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this UploadRasterRain.


        :param upload: The upload of this UploadRasterRain.  # noqa: E501
        :type: UploadReadOnly
        """

        self._upload = upload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadRasterRain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
