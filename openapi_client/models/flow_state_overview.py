# coding: utf-8

"""
    3DI API

    3DI simulation API  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FlowStateOverview(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'str',
        'created': 'datetime',
        'created_timestep': 'int',
        'tags': 'str',
        'expiry': 'datetime',
        'timestep': 'int',
        'thresholds': 'list[Threshold]',
        'upload': 'UploadReadOnly',
        'id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'created': 'created',
        'created_timestep': 'created_timestep',
        'tags': 'tags',
        'expiry': 'expiry',
        'timestep': 'timestep',
        'thresholds': 'thresholds',
        'upload': 'upload',
        'id': 'id'
    }

    def __init__(self, name=None, type=None, created=None, created_timestep=None, tags=None, expiry=None, timestep=None, thresholds=None, upload=None, id=None):  # noqa: E501
        """FlowStateOverview - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._type = None
        self._created = None
        self._created_timestep = None
        self._tags = None
        self._expiry = None
        self._timestep = None
        self._thresholds = None
        self._upload = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.type = type
        self.created = created
        self.created_timestep = created_timestep
        if tags is not None:
            self.tags = tags
        self.expiry = expiry
        self.timestep = timestep
        self.thresholds = thresholds
        if upload is not None:
            self.upload = upload
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this FlowStateOverview.  # noqa: E501


        :return: The name of this FlowStateOverview.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FlowStateOverview.


        :param name: The name of this FlowStateOverview.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this FlowStateOverview.  # noqa: E501


        :return: The type of this FlowStateOverview.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FlowStateOverview.


        :param type: The type of this FlowStateOverview.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["stable_threshold", "timed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created(self):
        """Gets the created of this FlowStateOverview.  # noqa: E501


        :return: The created of this FlowStateOverview.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FlowStateOverview.


        :param created: The created of this FlowStateOverview.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_timestep(self):
        """Gets the created_timestep of this FlowStateOverview.  # noqa: E501


        :return: The created_timestep of this FlowStateOverview.  # noqa: E501
        :rtype: int
        """
        return self._created_timestep

    @created_timestep.setter
    def created_timestep(self, created_timestep):
        """Sets the created_timestep of this FlowStateOverview.


        :param created_timestep: The created_timestep of this FlowStateOverview.  # noqa: E501
        :type: int
        """
        if created_timestep is not None and created_timestep > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `created_timestep`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if created_timestep is not None and created_timestep < 0:  # noqa: E501
            raise ValueError("Invalid value for `created_timestep`, must be a value greater than or equal to `0`")  # noqa: E501

        self._created_timestep = created_timestep

    @property
    def tags(self):
        """Gets the tags of this FlowStateOverview.  # noqa: E501


        :return: The tags of this FlowStateOverview.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FlowStateOverview.


        :param tags: The tags of this FlowStateOverview.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def expiry(self):
        """Gets the expiry of this FlowStateOverview.  # noqa: E501


        :return: The expiry of this FlowStateOverview.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this FlowStateOverview.


        :param expiry: The expiry of this FlowStateOverview.  # noqa: E501
        :type: datetime
        """

        self._expiry = expiry

    @property
    def timestep(self):
        """Gets the timestep of this FlowStateOverview.  # noqa: E501


        :return: The timestep of this FlowStateOverview.  # noqa: E501
        :rtype: int
        """
        return self._timestep

    @timestep.setter
    def timestep(self, timestep):
        """Sets the timestep of this FlowStateOverview.


        :param timestep: The timestep of this FlowStateOverview.  # noqa: E501
        :type: int
        """
        if timestep is not None and timestep > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `timestep`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if timestep is not None and timestep < 0:  # noqa: E501
            raise ValueError("Invalid value for `timestep`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timestep = timestep

    @property
    def thresholds(self):
        """Gets the thresholds of this FlowStateOverview.  # noqa: E501


        :return: The thresholds of this FlowStateOverview.  # noqa: E501
        :rtype: list[Threshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this FlowStateOverview.


        :param thresholds: The thresholds of this FlowStateOverview.  # noqa: E501
        :type: list[Threshold]
        """
        if thresholds is None:
            raise ValueError("Invalid value for `thresholds`, must not be `None`")  # noqa: E501

        self._thresholds = thresholds

    @property
    def upload(self):
        """Gets the upload of this FlowStateOverview.  # noqa: E501


        :return: The upload of this FlowStateOverview.  # noqa: E501
        :rtype: UploadReadOnly
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this FlowStateOverview.


        :param upload: The upload of this FlowStateOverview.  # noqa: E501
        :type: UploadReadOnly
        """

        self._upload = upload

    @property
    def id(self):
        """Gets the id of this FlowStateOverview.  # noqa: E501


        :return: The id of this FlowStateOverview.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlowStateOverview.


        :param id: The id of this FlowStateOverview.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowStateOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
