# coding: utf-8

"""
    3DI API

    3DI simulation API  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadTimestamps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'values_reference': 'str',
        'units': 'str',
        'timestamps': 'list[int]',
        'start_timestep': 'int',
        'end_timestep': 'int',
        'geotransform': 'list[float]',
        'epsg_code': 'int',
        'interval': 'int',
        'error': 'str'
    }

    attribute_map = {
        'values_reference': 'values_reference',
        'units': 'units',
        'timestamps': 'timestamps',
        'start_timestep': 'start_timestep',
        'end_timestep': 'end_timestep',
        'geotransform': 'geotransform',
        'epsg_code': 'epsg_code',
        'interval': 'interval',
        'error': 'error'
    }

    def __init__(self, values_reference=None, units=None, timestamps=None, start_timestep=None, end_timestep=None, geotransform=None, epsg_code=None, interval=None, error=None):  # noqa: E501
        """UploadTimestamps - a model defined in OpenAPI"""  # noqa: E501

        self._values_reference = None
        self._units = None
        self._timestamps = None
        self._start_timestep = None
        self._end_timestep = None
        self._geotransform = None
        self._epsg_code = None
        self._interval = None
        self._error = None
        self.discriminator = None

        if values_reference is not None:
            self.values_reference = values_reference
        if units is not None:
            self.units = units
        if timestamps is not None:
            self.timestamps = timestamps
        if start_timestep is not None:
            self.start_timestep = start_timestep
        if end_timestep is not None:
            self.end_timestep = end_timestep
        if geotransform is not None:
            self.geotransform = geotransform
        if epsg_code is not None:
            self.epsg_code = epsg_code
        if interval is not None:
            self.interval = interval
        if error is not None:
            self.error = error

    @property
    def values_reference(self):
        """Gets the values_reference of this UploadTimestamps.  # noqa: E501


        :return: The values_reference of this UploadTimestamps.  # noqa: E501
        :rtype: str
        """
        return self._values_reference

    @values_reference.setter
    def values_reference(self, values_reference):
        """Sets the values_reference of this UploadTimestamps.


        :param values_reference: The values_reference of this UploadTimestamps.  # noqa: E501
        :type: str
        """
        if values_reference is not None and len(values_reference) > 255:
            raise ValueError("Invalid value for `values_reference`, length must be less than or equal to `255`")  # noqa: E501
        if values_reference is not None and len(values_reference) < 1:
            raise ValueError("Invalid value for `values_reference`, length must be greater than or equal to `1`")  # noqa: E501

        self._values_reference = values_reference

    @property
    def units(self):
        """Gets the units of this UploadTimestamps.  # noqa: E501


        :return: The units of this UploadTimestamps.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this UploadTimestamps.


        :param units: The units of this UploadTimestamps.  # noqa: E501
        :type: str
        """
        if units is not None and len(units) > 64:
            raise ValueError("Invalid value for `units`, length must be less than or equal to `64`")  # noqa: E501
        if units is not None and len(units) < 1:
            raise ValueError("Invalid value for `units`, length must be greater than or equal to `1`")  # noqa: E501

        self._units = units

    @property
    def timestamps(self):
        """Gets the timestamps of this UploadTimestamps.  # noqa: E501

        seconds in the simulation  # noqa: E501

        :return: The timestamps of this UploadTimestamps.  # noqa: E501
        :rtype: list[int]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this UploadTimestamps.

        seconds in the simulation  # noqa: E501

        :param timestamps: The timestamps of this UploadTimestamps.  # noqa: E501
        :type: list[int]
        """

        self._timestamps = timestamps

    @property
    def start_timestep(self):
        """Gets the start_timestep of this UploadTimestamps.  # noqa: E501

        seconds in the simulation  # noqa: E501

        :return: The start_timestep of this UploadTimestamps.  # noqa: E501
        :rtype: int
        """
        return self._start_timestep

    @start_timestep.setter
    def start_timestep(self, start_timestep):
        """Sets the start_timestep of this UploadTimestamps.

        seconds in the simulation  # noqa: E501

        :param start_timestep: The start_timestep of this UploadTimestamps.  # noqa: E501
        :type: int
        """
        if start_timestep is not None and start_timestep < 0:  # noqa: E501
            raise ValueError("Invalid value for `start_timestep`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_timestep = start_timestep

    @property
    def end_timestep(self):
        """Gets the end_timestep of this UploadTimestamps.  # noqa: E501

        seconds in the simulation  # noqa: E501

        :return: The end_timestep of this UploadTimestamps.  # noqa: E501
        :rtype: int
        """
        return self._end_timestep

    @end_timestep.setter
    def end_timestep(self, end_timestep):
        """Sets the end_timestep of this UploadTimestamps.

        seconds in the simulation  # noqa: E501

        :param end_timestep: The end_timestep of this UploadTimestamps.  # noqa: E501
        :type: int
        """
        if end_timestep is not None and end_timestep < 0:  # noqa: E501
            raise ValueError("Invalid value for `end_timestep`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_timestep = end_timestep

    @property
    def geotransform(self):
        """Gets the geotransform of this UploadTimestamps.  # noqa: E501


        :return: The geotransform of this UploadTimestamps.  # noqa: E501
        :rtype: list[float]
        """
        return self._geotransform

    @geotransform.setter
    def geotransform(self, geotransform):
        """Sets the geotransform of this UploadTimestamps.


        :param geotransform: The geotransform of this UploadTimestamps.  # noqa: E501
        :type: list[float]
        """

        self._geotransform = geotransform

    @property
    def epsg_code(self):
        """Gets the epsg_code of this UploadTimestamps.  # noqa: E501


        :return: The epsg_code of this UploadTimestamps.  # noqa: E501
        :rtype: int
        """
        return self._epsg_code

    @epsg_code.setter
    def epsg_code(self, epsg_code):
        """Sets the epsg_code of this UploadTimestamps.


        :param epsg_code: The epsg_code of this UploadTimestamps.  # noqa: E501
        :type: int
        """

        self._epsg_code = epsg_code

    @property
    def interval(self):
        """Gets the interval of this UploadTimestamps.  # noqa: E501


        :return: The interval of this UploadTimestamps.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this UploadTimestamps.


        :param interval: The interval of this UploadTimestamps.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def error(self):
        """Gets the error of this UploadTimestamps.  # noqa: E501


        :return: The error of this UploadTimestamps.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this UploadTimestamps.


        :param error: The error of this UploadTimestamps.  # noqa: E501
        :type: str
        """
        if error is not None and len(error) > 512:
            raise ValueError("Invalid value for `error`, length must be less than or equal to `512`")  # noqa: E501
        if error is not None and len(error) < 1:
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `1`")  # noqa: E501

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadTimestamps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
