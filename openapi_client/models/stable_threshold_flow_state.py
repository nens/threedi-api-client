# coding: utf-8

"""
    3DI API

    3DI simulation API  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StableThresholdFlowState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'name': 'str',
        'simulation': 'str',
        'created': 'datetime',
        'tags': 'str',
        'expiry': 'datetime',
        'thresholds': 'list[Threshold]'
    }

    attribute_map = {
        'url': 'url',
        'name': 'name',
        'simulation': 'simulation',
        'created': 'created',
        'tags': 'tags',
        'expiry': 'expiry',
        'thresholds': 'thresholds'
    }

    def __init__(self, url=None, name=None, simulation=None, created=None, tags=None, expiry=None, thresholds=None):  # noqa: E501
        """StableThresholdFlowState - a model defined in OpenAPI"""  # noqa: E501

        self._url = None
        self._name = None
        self._simulation = None
        self._created = None
        self._tags = None
        self._expiry = None
        self._thresholds = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if name is not None:
            self.name = name
        if simulation is not None:
            self.simulation = simulation
        if created is not None:
            self.created = created
        if tags is not None:
            self.tags = tags
        self.expiry = expiry
        self.thresholds = thresholds

    @property
    def url(self):
        """Gets the url of this StableThresholdFlowState.  # noqa: E501


        :return: The url of this StableThresholdFlowState.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StableThresholdFlowState.


        :param url: The url of this StableThresholdFlowState.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this StableThresholdFlowState.  # noqa: E501


        :return: The name of this StableThresholdFlowState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StableThresholdFlowState.


        :param name: The name of this StableThresholdFlowState.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def simulation(self):
        """Gets the simulation of this StableThresholdFlowState.  # noqa: E501


        :return: The simulation of this StableThresholdFlowState.  # noqa: E501
        :rtype: str
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this StableThresholdFlowState.


        :param simulation: The simulation of this StableThresholdFlowState.  # noqa: E501
        :type: str
        """

        self._simulation = simulation

    @property
    def created(self):
        """Gets the created of this StableThresholdFlowState.  # noqa: E501


        :return: The created of this StableThresholdFlowState.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StableThresholdFlowState.


        :param created: The created of this StableThresholdFlowState.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def tags(self):
        """Gets the tags of this StableThresholdFlowState.  # noqa: E501


        :return: The tags of this StableThresholdFlowState.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StableThresholdFlowState.


        :param tags: The tags of this StableThresholdFlowState.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def expiry(self):
        """Gets the expiry of this StableThresholdFlowState.  # noqa: E501


        :return: The expiry of this StableThresholdFlowState.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this StableThresholdFlowState.


        :param expiry: The expiry of this StableThresholdFlowState.  # noqa: E501
        :type: datetime
        """

        self._expiry = expiry

    @property
    def thresholds(self):
        """Gets the thresholds of this StableThresholdFlowState.  # noqa: E501


        :return: The thresholds of this StableThresholdFlowState.  # noqa: E501
        :rtype: list[Threshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this StableThresholdFlowState.


        :param thresholds: The thresholds of this StableThresholdFlowState.  # noqa: E501
        :type: list[Threshold]
        """
        if thresholds is None:
            raise ValueError("Invalid value for `thresholds`, must not be `None`")  # noqa: E501

        self._thresholds = thresholds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StableThresholdFlowState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
