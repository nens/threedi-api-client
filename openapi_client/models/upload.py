# coding: utf-8

"""
    3DI API

    3DI simulation API  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Upload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'storage_name': 'str',
        'filename': 'str',
        'bucket': 'str',
        'prefix': 'str',
        'type': 'str',
        'state': 'str'
    }

    attribute_map = {
        'url': 'url',
        'storage_name': 'storage_name',
        'filename': 'filename',
        'bucket': 'bucket',
        'prefix': 'prefix',
        'type': 'type',
        'state': 'state'
    }

    def __init__(self, url=None, storage_name=None, filename=None, bucket=None, prefix=None, type=None, state=None):  # noqa: E501
        """Upload - a model defined in OpenAPI"""  # noqa: E501

        self._url = None
        self._storage_name = None
        self._filename = None
        self._bucket = None
        self._prefix = None
        self._type = None
        self._state = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if storage_name is not None:
            self.storage_name = storage_name
        self.filename = filename
        self.bucket = bucket
        self.prefix = prefix
        self.type = type
        self.state = state

    @property
    def url(self):
        """Gets the url of this Upload.  # noqa: E501


        :return: The url of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Upload.


        :param url: The url of this Upload.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def storage_name(self):
        """Gets the storage_name of this Upload.  # noqa: E501


        :return: The storage_name of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """Sets the storage_name of this Upload.


        :param storage_name: The storage_name of this Upload.  # noqa: E501
        :type: str
        """
        if storage_name is not None and len(storage_name) < 1:
            raise ValueError("Invalid value for `storage_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._storage_name = storage_name

    @property
    def filename(self):
        """Gets the filename of this Upload.  # noqa: E501


        :return: The filename of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Upload.


        :param filename: The filename of this Upload.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501
        if filename is not None and len(filename) > 256:
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `256`")  # noqa: E501
        if filename is not None and len(filename) < 1:
            raise ValueError("Invalid value for `filename`, length must be greater than or equal to `1`")  # noqa: E501

        self._filename = filename

    @property
    def bucket(self):
        """Gets the bucket of this Upload.  # noqa: E501


        :return: The bucket of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this Upload.


        :param bucket: The bucket of this Upload.  # noqa: E501
        :type: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")  # noqa: E501
        if bucket is not None and len(bucket) > 256:
            raise ValueError("Invalid value for `bucket`, length must be less than or equal to `256`")  # noqa: E501
        if bucket is not None and len(bucket) < 1:
            raise ValueError("Invalid value for `bucket`, length must be greater than or equal to `1`")  # noqa: E501

        self._bucket = bucket

    @property
    def prefix(self):
        """Gets the prefix of this Upload.  # noqa: E501


        :return: The prefix of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Upload.


        :param prefix: The prefix of this Upload.  # noqa: E501
        :type: str
        """
        if prefix is not None and len(prefix) > 256:
            raise ValueError("Invalid value for `prefix`, length must be less than or equal to `256`")  # noqa: E501

        self._prefix = prefix

    @property
    def type(self):
        """Gets the type of this Upload.  # noqa: E501


        :return: The type of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Upload.


        :param type: The type of this Upload.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["temporalraster"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def state(self):
        """Gets the state of this Upload.  # noqa: E501


        :return: The state of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Upload.


        :param state: The state of this Upload.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["created", "uploaded", "processed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Upload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
