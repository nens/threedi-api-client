# coding: utf-8

"""
    3Di API

    3Di simulation API   Framework release: 0.0.17   3Di core release: 2.0.2  deployed on:  10:18AM (UTC) on October 30, 2019  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BoundaryCondition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'threedimodel': 'str',
        'url': 'str',
        'boundary_id': 'int',
        'type': 'str',
        'dimension': 'str',
        'display_name': 'str',
        'line': 'str',
        'point': 'str'
    }

    attribute_map = {
        'threedimodel': 'threedimodel',
        'url': 'url',
        'boundary_id': 'boundary_id',
        'type': 'type',
        'dimension': 'dimension',
        'display_name': 'display_name',
        'line': 'line',
        'point': 'point'
    }

    def __init__(self, threedimodel=None, url=None, boundary_id=None, type=None, dimension=None, display_name=None, line=None, point=None):  # noqa: E501
        """BoundaryCondition - a model defined in OpenAPI"""  # noqa: E501

        self._threedimodel = None
        self._url = None
        self._boundary_id = None
        self._type = None
        self._dimension = None
        self._display_name = None
        self._line = None
        self._point = None
        self.discriminator = None

        if threedimodel is not None:
            self.threedimodel = threedimodel
        if url is not None:
            self.url = url
        self.boundary_id = boundary_id
        self.type = type
        self.dimension = dimension
        self.display_name = display_name
        self.line = line
        self.point = point

    @property
    def threedimodel(self):
        """Gets the threedimodel of this BoundaryCondition.  # noqa: E501


        :return: The threedimodel of this BoundaryCondition.  # noqa: E501
        :rtype: str
        """
        return self._threedimodel

    @threedimodel.setter
    def threedimodel(self, threedimodel):
        """Sets the threedimodel of this BoundaryCondition.


        :param threedimodel: The threedimodel of this BoundaryCondition.  # noqa: E501
        :type: str
        """

        self._threedimodel = threedimodel

    @property
    def url(self):
        """Gets the url of this BoundaryCondition.  # noqa: E501


        :return: The url of this BoundaryCondition.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BoundaryCondition.


        :param url: The url of this BoundaryCondition.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def boundary_id(self):
        """Gets the boundary_id of this BoundaryCondition.  # noqa: E501

        id in spatialite  # noqa: E501

        :return: The boundary_id of this BoundaryCondition.  # noqa: E501
        :rtype: int
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this BoundaryCondition.

        id in spatialite  # noqa: E501

        :param boundary_id: The boundary_id of this BoundaryCondition.  # noqa: E501
        :type: int
        """
        if boundary_id is None:
            raise ValueError("Invalid value for `boundary_id`, must not be `None`")  # noqa: E501
        if boundary_id is not None and boundary_id > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `boundary_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if boundary_id is not None and boundary_id < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `boundary_id`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._boundary_id = boundary_id

    @property
    def type(self):
        """Gets the type of this BoundaryCondition.  # noqa: E501


        :return: The type of this BoundaryCondition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BoundaryCondition.


        :param type: The type of this BoundaryCondition.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["velocity", "sommerfeldt", "riemann", "water_level", "discharge"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def dimension(self):
        """Gets the dimension of this BoundaryCondition.  # noqa: E501


        :return: The dimension of this BoundaryCondition.  # noqa: E501
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this BoundaryCondition.


        :param dimension: The dimension of this BoundaryCondition.  # noqa: E501
        :type: str
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")  # noqa: E501
        allowed_values = ["one_d", "two_d"]  # noqa: E501
        if dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `dimension` ({0}), must be one of {1}"  # noqa: E501
                .format(dimension, allowed_values)
            )

        self._dimension = dimension

    @property
    def display_name(self):
        """Gets the display_name of this BoundaryCondition.  # noqa: E501


        :return: The display_name of this BoundaryCondition.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BoundaryCondition.


        :param display_name: The display_name of this BoundaryCondition.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 60:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `60`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def line(self):
        """Gets the line of this BoundaryCondition.  # noqa: E501


        :return: The line of this BoundaryCondition.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this BoundaryCondition.


        :param line: The line of this BoundaryCondition.  # noqa: E501
        :type: str
        """

        self._line = line

    @property
    def point(self):
        """Gets the point of this BoundaryCondition.  # noqa: E501


        :return: The point of this BoundaryCondition.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this BoundaryCondition.


        :param point: The point of this BoundaryCondition.  # noqa: E501
        :type: str
        """

        self._point = point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundaryCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
