# coding: utf-8

"""
    3DI API

    3DI simulation API  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lizardrasterrain': 'list[LizardRasterRain]',
        'lizardtimeseriesrain': 'list[LizardTimeseriesRain]',
        'timeseriesrain': 'list[TimeseriesRainOverview]',
        'breach': 'list[Breach]',
        'lizardrastersourcessinks': 'list[LizardRasterSourcesSinks]',
        'lizardtimeseriessourcessinks': 'list[LizardTimeseriesSourcesSinks]',
        'uploadrastersourcessinks': 'list[UploadRasterSourcesSinks]',
        'uploadtimeseriessourcessinks': 'list[UploadTimeseriesSourcesSinks]',
        'timeseriessourcessinks': 'list[TimeseriesSourcesSinksOverview]',
        'uploadrasterrain': 'list[UploadRasterRain]',
        'uploadtimeseriesrain': 'list[UploadTimeseriesRain]'
    }

    attribute_map = {
        'lizardrasterrain': 'lizardrasterrain',
        'lizardtimeseriesrain': 'lizardtimeseriesrain',
        'timeseriesrain': 'timeseriesrain',
        'breach': 'breach',
        'lizardrastersourcessinks': 'lizardrastersourcessinks',
        'lizardtimeseriessourcessinks': 'lizardtimeseriessourcessinks',
        'uploadrastersourcessinks': 'uploadrastersourcessinks',
        'uploadtimeseriessourcessinks': 'uploadtimeseriessourcessinks',
        'timeseriessourcessinks': 'timeseriessourcessinks',
        'uploadrasterrain': 'uploadrasterrain',
        'uploadtimeseriesrain': 'uploadtimeseriesrain'
    }

    def __init__(self, lizardrasterrain=None, lizardtimeseriesrain=None, timeseriesrain=None, breach=None, lizardrastersourcessinks=None, lizardtimeseriessourcessinks=None, uploadrastersourcessinks=None, uploadtimeseriessourcessinks=None, timeseriessourcessinks=None, uploadrasterrain=None, uploadtimeseriesrain=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501

        self._lizardrasterrain = None
        self._lizardtimeseriesrain = None
        self._timeseriesrain = None
        self._breach = None
        self._lizardrastersourcessinks = None
        self._lizardtimeseriessourcessinks = None
        self._uploadrastersourcessinks = None
        self._uploadtimeseriessourcessinks = None
        self._timeseriessourcessinks = None
        self._uploadrasterrain = None
        self._uploadtimeseriesrain = None
        self.discriminator = None

        if lizardrasterrain is not None:
            self.lizardrasterrain = lizardrasterrain
        if lizardtimeseriesrain is not None:
            self.lizardtimeseriesrain = lizardtimeseriesrain
        if timeseriesrain is not None:
            self.timeseriesrain = timeseriesrain
        if breach is not None:
            self.breach = breach
        if lizardrastersourcessinks is not None:
            self.lizardrastersourcessinks = lizardrastersourcessinks
        if lizardtimeseriessourcessinks is not None:
            self.lizardtimeseriessourcessinks = lizardtimeseriessourcessinks
        if uploadrastersourcessinks is not None:
            self.uploadrastersourcessinks = uploadrastersourcessinks
        if uploadtimeseriessourcessinks is not None:
            self.uploadtimeseriessourcessinks = uploadtimeseriessourcessinks
        if timeseriessourcessinks is not None:
            self.timeseriessourcessinks = timeseriessourcessinks
        if uploadrasterrain is not None:
            self.uploadrasterrain = uploadrasterrain
        if uploadtimeseriesrain is not None:
            self.uploadtimeseriesrain = uploadtimeseriesrain

    @property
    def lizardrasterrain(self):
        """Gets the lizardrasterrain of this Event.  # noqa: E501


        :return: The lizardrasterrain of this Event.  # noqa: E501
        :rtype: list[LizardRasterRain]
        """
        return self._lizardrasterrain

    @lizardrasterrain.setter
    def lizardrasterrain(self, lizardrasterrain):
        """Sets the lizardrasterrain of this Event.


        :param lizardrasterrain: The lizardrasterrain of this Event.  # noqa: E501
        :type: list[LizardRasterRain]
        """

        self._lizardrasterrain = lizardrasterrain

    @property
    def lizardtimeseriesrain(self):
        """Gets the lizardtimeseriesrain of this Event.  # noqa: E501


        :return: The lizardtimeseriesrain of this Event.  # noqa: E501
        :rtype: list[LizardTimeseriesRain]
        """
        return self._lizardtimeseriesrain

    @lizardtimeseriesrain.setter
    def lizardtimeseriesrain(self, lizardtimeseriesrain):
        """Sets the lizardtimeseriesrain of this Event.


        :param lizardtimeseriesrain: The lizardtimeseriesrain of this Event.  # noqa: E501
        :type: list[LizardTimeseriesRain]
        """

        self._lizardtimeseriesrain = lizardtimeseriesrain

    @property
    def timeseriesrain(self):
        """Gets the timeseriesrain of this Event.  # noqa: E501


        :return: The timeseriesrain of this Event.  # noqa: E501
        :rtype: list[TimeseriesRainOverview]
        """
        return self._timeseriesrain

    @timeseriesrain.setter
    def timeseriesrain(self, timeseriesrain):
        """Sets the timeseriesrain of this Event.


        :param timeseriesrain: The timeseriesrain of this Event.  # noqa: E501
        :type: list[TimeseriesRainOverview]
        """

        self._timeseriesrain = timeseriesrain

    @property
    def breach(self):
        """Gets the breach of this Event.  # noqa: E501


        :return: The breach of this Event.  # noqa: E501
        :rtype: list[Breach]
        """
        return self._breach

    @breach.setter
    def breach(self, breach):
        """Sets the breach of this Event.


        :param breach: The breach of this Event.  # noqa: E501
        :type: list[Breach]
        """

        self._breach = breach

    @property
    def lizardrastersourcessinks(self):
        """Gets the lizardrastersourcessinks of this Event.  # noqa: E501


        :return: The lizardrastersourcessinks of this Event.  # noqa: E501
        :rtype: list[LizardRasterSourcesSinks]
        """
        return self._lizardrastersourcessinks

    @lizardrastersourcessinks.setter
    def lizardrastersourcessinks(self, lizardrastersourcessinks):
        """Sets the lizardrastersourcessinks of this Event.


        :param lizardrastersourcessinks: The lizardrastersourcessinks of this Event.  # noqa: E501
        :type: list[LizardRasterSourcesSinks]
        """

        self._lizardrastersourcessinks = lizardrastersourcessinks

    @property
    def lizardtimeseriessourcessinks(self):
        """Gets the lizardtimeseriessourcessinks of this Event.  # noqa: E501


        :return: The lizardtimeseriessourcessinks of this Event.  # noqa: E501
        :rtype: list[LizardTimeseriesSourcesSinks]
        """
        return self._lizardtimeseriessourcessinks

    @lizardtimeseriessourcessinks.setter
    def lizardtimeseriessourcessinks(self, lizardtimeseriessourcessinks):
        """Sets the lizardtimeseriessourcessinks of this Event.


        :param lizardtimeseriessourcessinks: The lizardtimeseriessourcessinks of this Event.  # noqa: E501
        :type: list[LizardTimeseriesSourcesSinks]
        """

        self._lizardtimeseriessourcessinks = lizardtimeseriessourcessinks

    @property
    def uploadrastersourcessinks(self):
        """Gets the uploadrastersourcessinks of this Event.  # noqa: E501


        :return: The uploadrastersourcessinks of this Event.  # noqa: E501
        :rtype: list[UploadRasterSourcesSinks]
        """
        return self._uploadrastersourcessinks

    @uploadrastersourcessinks.setter
    def uploadrastersourcessinks(self, uploadrastersourcessinks):
        """Sets the uploadrastersourcessinks of this Event.


        :param uploadrastersourcessinks: The uploadrastersourcessinks of this Event.  # noqa: E501
        :type: list[UploadRasterSourcesSinks]
        """

        self._uploadrastersourcessinks = uploadrastersourcessinks

    @property
    def uploadtimeseriessourcessinks(self):
        """Gets the uploadtimeseriessourcessinks of this Event.  # noqa: E501


        :return: The uploadtimeseriessourcessinks of this Event.  # noqa: E501
        :rtype: list[UploadTimeseriesSourcesSinks]
        """
        return self._uploadtimeseriessourcessinks

    @uploadtimeseriessourcessinks.setter
    def uploadtimeseriessourcessinks(self, uploadtimeseriessourcessinks):
        """Sets the uploadtimeseriessourcessinks of this Event.


        :param uploadtimeseriessourcessinks: The uploadtimeseriessourcessinks of this Event.  # noqa: E501
        :type: list[UploadTimeseriesSourcesSinks]
        """

        self._uploadtimeseriessourcessinks = uploadtimeseriessourcessinks

    @property
    def timeseriessourcessinks(self):
        """Gets the timeseriessourcessinks of this Event.  # noqa: E501


        :return: The timeseriessourcessinks of this Event.  # noqa: E501
        :rtype: list[TimeseriesSourcesSinksOverview]
        """
        return self._timeseriessourcessinks

    @timeseriessourcessinks.setter
    def timeseriessourcessinks(self, timeseriessourcessinks):
        """Sets the timeseriessourcessinks of this Event.


        :param timeseriessourcessinks: The timeseriessourcessinks of this Event.  # noqa: E501
        :type: list[TimeseriesSourcesSinksOverview]
        """

        self._timeseriessourcessinks = timeseriessourcessinks

    @property
    def uploadrasterrain(self):
        """Gets the uploadrasterrain of this Event.  # noqa: E501


        :return: The uploadrasterrain of this Event.  # noqa: E501
        :rtype: list[UploadRasterRain]
        """
        return self._uploadrasterrain

    @uploadrasterrain.setter
    def uploadrasterrain(self, uploadrasterrain):
        """Sets the uploadrasterrain of this Event.


        :param uploadrasterrain: The uploadrasterrain of this Event.  # noqa: E501
        :type: list[UploadRasterRain]
        """

        self._uploadrasterrain = uploadrasterrain

    @property
    def uploadtimeseriesrain(self):
        """Gets the uploadtimeseriesrain of this Event.  # noqa: E501


        :return: The uploadtimeseriesrain of this Event.  # noqa: E501
        :rtype: list[UploadTimeseriesRain]
        """
        return self._uploadtimeseriesrain

    @uploadtimeseriesrain.setter
    def uploadtimeseriesrain(self, uploadtimeseriesrain):
        """Sets the uploadtimeseriesrain of this Event.


        :param uploadtimeseriesrain: The uploadtimeseriesrain of this Event.  # noqa: E501
        :type: list[UploadTimeseriesRain]
        """

        self._uploadtimeseriesrain = uploadtimeseriesrain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
