import jwt
import re
import warnings
from datetime import datetime, timedelta
from threedi_api_client.openapi import ApiClient
from threedi_api_client.openapi import Configuration
from threedi_api_client.openapi import V3Api, V3AlphaApi
from threedi_api_client.openapi import Authenticate

from threedi_api_client.config import Config, EnvironConfig

__all__ = ["ThreediApi", "ThreediApiClient"]

# Get new token REFRESH_TIME_DELTA before it really expires.
REFRESH_TIME_DELTA = timedelta(hours=4).total_seconds()

API_CLASSES = {
    "v3": V3Api,
    "v3-alpha": V3AlphaApi,
}

def host_has_version(host: str):
    return bool(re.findall(r"(.*)\/v3.*", host))


def host_remove_version(host: str):
    matches = re.findall(r"(.*)\/v3.*", host)
    if matches:
        return matches[0]
    else:
        return host


def get_auth_token(username: str, password: str, api_host: str):
    api_client = ApiClient(
        Configuration(
            username=username,
            password=password,
            host=host_remove_version(api_host)
        )
    )
    api = V3Api(api_client)
    return api.auth_token_create(Authenticate(username, password))


def is_token_usable(token: str) -> bool:
    if token is None:
        return False

    try:
        # Get payload without verifying signature,
        # does NOT validate claims (including exp)
        payload = jwt.decode(
            token,
            options={"verify_signature": False},
        )
    except (jwt.exceptions.ExpiredSignatureError, jwt.exceptions.DecodeError):
        return False

    expiry_dt = datetime.utcfromtimestamp(payload["exp"])
    sec_left = (expiry_dt - datetime.utcnow()).total_seconds()
    return sec_left >= REFRESH_TIME_DELTA


def refresh_api_key(config: Configuration):
    """Refreshes the access key if its expired"""
    api_key = config.api_key.get("Authorization")
    if is_token_usable(api_key):
        return

    refresh_key = config.api_key['refresh']
    if is_token_usable(refresh_key):
        api_client = ApiClient(Configuration(host_remove_version(config.host)))
        api = V3Api(api_client)
        token = api.auth_refresh_token_create(
            {"refresh": config.api_key['refresh']}
        )
    else:
        token = get_auth_token(config.username, config.password, config.host)
    config.api_key = {
        'Authorization': token.access,
        'refresh': token.refresh
    }


class ThreediApiClient:
    """Client for the 3Di API

    This client is legacy: please use the ThreediApi instead. A warning will
    be emitted if this client used.

    Args:
        env_file: path to a configuration file
        config: configuration dictionary for this client
    
    Returns:
        This class constructs an openapi_client.ApiClient object, which is
        autogenerated by the OpenAPI generator.
    """
    def __new__(cls, env_file=None, config=None):
        warnings.warn(
            "ThreediApiClient is pending deprecation. Please use the new "
            "threedi_api_client.ThreediApi instead.",
            UserWarning,
        )

        if env_file is not None:
            user_config = Config(env_file)
        elif config is not None:
            user_config = config
        else:
            user_config = EnvironConfig()

        # Determine whether there is a version in the host. The legacy API client
        # requires this.
        api_host = user_config.get("API_HOST")
        if api_host is not None and not host_has_version(api_host):
            raise ValueError(
                f"Invalid API_HOST '{api_host}'. The (legacy) ThreediApiClient expects a "
                f"version to be present."
            )

        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            from openapi_client import ApiClient as LegacyApiClient

        configuration = Configuration(
            host=api_host,
            username=user_config.get("API_USERNAME"),
            password=user_config.get("API_PASSWORD"),
            api_key={"Authorization": '', "refresh": ''},
            api_key_prefix={"Authorization": "Bearer"}
        )
        configuration.refresh_api_key_hook = refresh_api_key

        return LegacyApiClient(configuration)


class ThreediApi:
    """Client for the 3Di API.

    The following three settings are necessary to make requests to the 3Di
    API:

    -  the host name, for example https://api.3di.live
    -  the username to login with
    -  the password to login with

    These settings can either be stored in a ``.env`` file, supplied via environment
    variables, or passed as a config dictionairy.

    1) A sample ``.env`` file could look like this::

        THREEDI_API_HOST=https://api.3di.live
        THREEDI_API_USERNAME=your.username
        THREEDI_API_PASSWORD=your.password

    .. code:: python

        from threedi_api_client import ThreediApi

        env_file = "<path>/.env"
        api = ThreediApi(env_file=env_file)

    2) The same variables can be set as environment variables:

    On Windows, set them via advanced system settings, or via the command prompt::

        set THREEDI_API_HOST "https://api.3di.live"
        set THREEDI_API_USERNAME "your.username"
        set THREEDI_API_PASSWORD "your.password"

    On Linux/OSX, use the following in the console::

        export THREEDI_API_HOST=https://api.3di.live
        export THREEDI_API_USERNAME=your.username
        export THREEDI_API_PASSWORD=your.password

    3) The ``config`` keyword argument can be used like:

    .. code:: python

        from threedi_api_client import ThreediApi
        from getpass import getpass

        config = {
            "THREEDI_API_HOST": "https://api.3di.live",
            "THREEDI_API_USERNAME": "your.username",
            "THREEDI_API_PASSWORD": getpass(),
        }

        api = ThreediApi(config=config)
    

    Unlike with the (legacy) ThreediApiClient, this object can be used directly
    to start sending requests.

    Args:
        env_file (str or pathlib.Path): path to a configuration file
        config (dict): configuration dictionary for this client
        version (str): the API version to use (default: 'v3')
    
    Returns:
        This class constructs an Api object that was autogenerated by the OpenAPI
        generator. The autogenerated code lives under threedi_api_client.openapi.api.
    """
    def __new__(cls, env_file=None, config=None, version="v3"):
        if env_file is not None:
            user_config = Config(env_file)
        elif config is not None:
            user_config = config
        else:
            user_config = EnvironConfig()

        # Determine whether there is a version in the host
        api_host = user_config.get("THREEDI_API_HOST")
        if api_host is not None and host_has_version(api_host):
            raise ValueError(
                f"Invalid THREEDI_API_HOST '{api_host}'. The ThreediApi expects that the "
                f"version is not included."
            )

        configuration = Configuration(
            host=api_host,
            username=user_config.get("THREEDI_API_USERNAME"),
            password=user_config.get("THREEDI_API_PASSWORD"),
            api_key={"Authorization": '', "refresh": ''},
            api_key_prefix={"Authorization": "Bearer"}
        )
        configuration.refresh_api_key_hook = refresh_api_key

        # Determine what API version to use
        try:
            api_cls = API_CLASSES[version]
        except KeyError:
            raise ValueError(
                f"Invalid API version '{version}'. Available options are: {set(API_CLASSES.keys())}."
            )

        return api_cls(ApiClient(configuration))
